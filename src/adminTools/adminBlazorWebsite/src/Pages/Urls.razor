@page "/Urls"
@using adminBlazorWebsite.Data
@inject UrlShortenerService UrlService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "admin")]

<SpinLoader IsLoading="@(UrlList == null)">
    <LoadingTemplate>
        <div class="col-12" style="background-color: white; height:400px; vertical-align:middle">
            <CircleFade Center="true" Color="#1b6ec2" Size="40px" /><br />
            <h5 align="center" style="font-weight:bold; color:#1b6ec2">Loading...</h5>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Vanity</th>
                    <th>Title</th>
                    <th>Url</th>
                    <th>Clicks</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var url in UrlList.UrlList)
                {
                <tr>
                    <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => CopyToClipboardAsync(url.ShortUrl))">Copy</button></td>
                    <td><a href="@url.ShortUrl" target="blank">@url.RowKey</a></td>
                    <td>
                        <span>@url.Title</span>
                    </td>
                    <td>
                        <span title="@url.Url">@url.GetDisplayableUrl()</span>
                    </td>
                    <td>@url.Clicks</td>
                    <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditShortUrl(url))">Edit</button></td>
                    <td><button id="@url.RowKey" type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => ArchiveShortUrl(url))">Archive</button></td>
                </tr>
                }
            </tbody>
        </table>
        <p>
            <!-- Add a new ShortUrl -->
            <button class="btn btn-primary"
                    @onclick="CreateShortUrl">
                Add New Url
            </button>
        </p>

        @if (ShowCreatePopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Short Url Request</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <label>Title</label>
                            <input class="form-control" type="text"
                                   placeholder="Title or description for this URL"
                                   @bind="shortUrlRequest.Title" />
                            <br />
                            <label>The Url to redirect</label>
                            <input class="form-control" type="text"
                                   placeholder="The Url to redirect"
                                   @bind="shortUrlRequest.Url" />
                            <br />
                            <label>Vanity</label>
                            <input class="form-control" type="text"
                                   placeholder="Vanity or the 'End' part of the Url"
                                   @bind="shortUrlRequest.Vanity" />
                            <br />
                            <button class="btn btn-primary"
                                    @onclick="SaveShortUrl">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }


        @if (ShowEditPopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Edit Short Url</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <label>Title</label>
                            <input class="form-control" type="text"
                                   placeholder="Title or description for this URL"
                                   @bind="editedUrl.Title" />
                            <br />
                            <label>The Url to redirect</label>
                            <input class="form-control" type="text"
                                   placeholder="https://..."
                                   @bind="editedUrl.Url" />
                            <br />
                            <button class="btn btn-primary"
                                    @onclick="SaveUpdatedShortUrl">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </ContentTemplate>
</SpinLoader>

@code
{
    string buttonRef;
    bool ShowCreatePopup = false;
    bool ShowEditPopup = false;
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl;
    ShortUrlList UrlList;

    void ClosePopup()
    {
        ShowCreatePopup = false;
        ShowEditPopup = false;
    }
    private async Task SaveShortUrl()
    {
        ShowCreatePopup = false;
        await UrlService.CreateShortUrl(shortUrlRequest);
        UrlList = await UrlService.GetUrlList();
    }

    private async Task SaveUpdatedShortUrl()
    {
        ShowEditPopup = false;
        await UrlService.UpdateShortUrl(editedUrl);
        UrlList = await UrlService.GetUrlList();
    }
    protected override async Task OnParametersSetAsync()
    {
        //ToDo remember to remove this before pushing
        await Task.Delay(8000);
        UrlList = await UrlService.GetUrlList();
    }

    [Authorize(Roles = "admin")]
    void CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        ShowCreatePopup = true;
    }

    [Authorize(Roles = "admin")]
    void EditShortUrl(ShortUrlEntity urlEntity)
    {
        editedUrl = urlEntity;
        ShowEditPopup = true;
    }

    [Authorize(Roles = "admin")]
    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        System.Diagnostics.Debug.WriteLine(buttonRef);
        await UrlService.ArchiveShortUrl(urlEntity);
        UrlList = await UrlService.GetUrlList();
    }


    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }
}